// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	model "backend-engineer-test-privy/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// CakeRepository is an autogenerated mock type for the CakeRepository type
type CakeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, cake
func (_m *CakeRepository) Create(ctx context.Context, tx *sql.Tx, cake *model.Cake) (uint, error) {
	ret := _m.Called(ctx, tx, cake)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Cake) uint); ok {
		r0 = rf(ctx, tx, cake)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *model.Cake) error); ok {
		r1 = rf(ctx, tx, cake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, tx, id
func (_m *CakeRepository) Delete(ctx context.Context, tx *sql.Tx, id uint) error {
	ret := _m.Called(ctx, tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, uint) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, tx
func (_m *CakeRepository) GetAll(ctx context.Context, tx *sql.Tx) ([]*model.Cake, error) {
	ret := _m.Called(ctx, tx)

	var r0 []*model.Cake
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) []*model.Cake); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Cake)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tx, id
func (_m *CakeRepository) GetByID(ctx context.Context, tx *sql.Tx, id uint) (*model.Cake, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *model.Cake
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, uint) *model.Cake); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cake)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, uint) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, cake
func (_m *CakeRepository) Update(ctx context.Context, tx *sql.Tx, cake *model.Cake) error {
	ret := _m.Called(ctx, tx, cake)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Cake) error); ok {
		r0 = rf(ctx, tx, cake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCakeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCakeRepository creates a new instance of CakeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCakeRepository(t mockConstructorTestingTNewCakeRepository) *CakeRepository {
	mock := &CakeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
